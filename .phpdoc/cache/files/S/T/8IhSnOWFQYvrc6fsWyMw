1683346268
waR3U4bTeM%3Af28473ab137937381c2f8a541aa58669-c311a03d6de80f6735b302b931148bd8
s:32440:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:32:"Gestion de l'affichage des frais";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:13:"PHP Version 7";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:10:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:8:"category";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:3:"PPE";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:3:"GSB";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:2;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:13:"Réseau CERTA";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:23:"contact@reseaucerta.org";s:14:" * description";N;}i:3;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:9:"José GIL";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:15:"jgil@ac-nice.fr";s:14:" * description";N;}i:4;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:20:"Valentine SCHALCKENS";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:22:"v.schalckens@gmail.com";s:14:" * description";N;}i:5;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:16:"Julien Lempereur";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:28:"lempereur.julien83@gmail.com";s:14:" * description";N;}i:6;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:9:"copyright";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:18:"2017 Réseau CERTA";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:7;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"license";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:13:"Réseau CERTA";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:8;O:49:"phpDocumentor\Reflection\DocBlock\Tags\InvalidTag":3:{s:55:" phpDocumentor\Reflection\DocBlock\Tags\InvalidTag name";s:7:"version";s:55:" phpDocumentor\Reflection\DocBlock\Tags\InvalidTag body";s:8:"GIT: <0>";s:60:" phpDocumentor\Reflection\DocBlock\Tags\InvalidTag throwable";N;}i:9;O:43:"phpDocumentor\Reflection\DocBlock\Tags\Link":3:{s:7:" * name";s:4:"link";s:49:" phpDocumentor\Reflection\DocBlock\Tags\Link link";s:26:"http://www.reseaucerta.org";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:30:"Contexte « Laboratoire GSB »";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"c311a03d6de80f6735b302b931148bd8";s:39:" phpDocumentor\Reflection\Php\File name";s:18:"c_validerFrais.php";s:39:" phpDocumentor\Reflection\Php\File path";s:30:"controleurs/c_validerFrais.php";s:41:" phpDocumentor\Reflection\Php\File source";s:19382:"<?php

/**
 * Gestion de l'affichage des frais
 *
 * PHP Version 7
 *
 * @category  PPE
 * @package   GSB
 * @author    Réseau CERTA <contact@reseaucerta.org>
 * @author    José GIL <jgil@ac-nice.fr>
 * @author    Valentine SCHALCKENS <v.schalckens@gmail.com>
 * @author    Julien Lempereur <lempereur.julien83@gmail.com>
 * @copyright 2017 Réseau CERTA
 * @license   Réseau CERTA
 * @version   GIT: <0>
 * @link      http://www.reseaucerta.org Contexte « Laboratoire GSB »
 */
//recupère tous les visireurs avec leurs attributs
$lesNomsvisiteurs = $pdo->getTableauVisiteur();
$action = filter_input(INPUT_GET, 'action', FILTER_SANITIZE_STRING);
$idComptable = $_SESSION['idComptable'];
//recupère le mois actuel
$mois = getMois(date('d/m/Y'));
$numAnnee = substr($mois, 0, 4);
$numMois = substr($mois, 4, 2);

switch ($action) {
    case 'valideFrais':
        //Id du visiteur sélectionner
        $idVisiteur = $lesNomsvisiteurs[0]['id'];
        $idVisiteurSelectionner = $idVisiteur;
        //Tous les mois du visiteur
        $lesMoisVisiteur = $pdo->getLesMoisDisponiblesCL($idVisiteurSelectionner);

        //Premier Mois du visiteur
        if ($lesMoisVisiteur) {
            $moisASelectionner = $lesMoisVisiteur[0];

            //Prend le tous premier Visteur de la liste
            $leVisiteur = $lesNomsvisiteurs[0];
            //Recupère tous les frais de ce visiteur
            $LesFrais = $pdo->getLesFraisForfait($idVisiteurSelectionner, $moisASelectionner['mois']);
            $ETP = $LesFrais[0]['quantite'];
            $KM = $LesFrais[1]['quantite'];
            $NUI = $LesFrais[2]['quantite'];
            $REP = $LesFrais[3]['quantite'];
            $lesMois = $lesMoisVisiteur;
            $lesFraisForfait = $pdo->getLesFraisHorsForfait($idVisiteurSelectionner, $moisASelectionner['mois']);
            $MoiSelectionner = $moisASelectionner['mois'];

            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            include 'vues/vuesComptables/v_ElementForfaitises.php';
            if ($lesFraisForfait) {
                foreach ($lesFraisForfait as $unFraisHorsForfait) {
                    $libelle = htmlspecialchars($unFraisHorsForfait['libelle']);
                    $date = $unFraisHorsForfait['date'];
                    $montant = $unFraisHorsForfait['montant'];
                    $idFraisHF = $unFraisHorsForfait['id'];
                    $nameMontant = 'montant' . $idFraisHF;
                    include 'vues/vuesComptables/v_fraisHorsForfaitComp.php';
                }
            } else {
                ajouterErreur("Aucun frais hors forfait pour ce visiteur ce mois-ci !");
                include 'vues/v_erreurs.php';
            }
        } else {
            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            ajouterErreur("Aucune fiche de frais à validé pour ce visiteur !");
            include 'vues/v_erreurs.php';
        }
        break;

    case 'MoisDispo':
        //recupère le mois choisit par l'utilisateur
        $MoiSelectionner = filter_input(INPUT_POST, 'lstMois', FILTER_SANITIZE_STRING);
        //recupère le visiteur choisit par l'utilisateur
        $idVisiteurSelectionner = filter_input(INPUT_POST, 'visiteur', FILTER_SANITIZE_STRING);
        //recupère tous les mois du visiteur choisi
        $lesMoisVisiteur = $pdo->getLesMoisDisponiblesCL($idVisiteurSelectionner);
        if ($lesMoisVisiteur) {
            if ($MoiSelectionner) {
                $numAnnee = substr($MoiSelectionner, 2, 4);
                $numMois = substr($MoiSelectionner, 0, 2);
                $MoiSelectionner = $numAnnee . $numMois;
            }
            //Change nom de la variable 
            $nomVisiteur = $lesNomsvisiteurs;
            foreach ($lesNomsvisiteurs as $visiteurs) {
                if ($visiteurs['id'] == $idVisiteurSelectionner) {
                    $leVisiteur = $visiteurs;
                }
            }
            $existe = false;
            foreach ($lesMoisVisiteur as $unMois) {
                if ($unMois['mois'] == $MoiSelectionner) {
                    $existe = true;
                }
            }
            if (!$existe) {
                $MoiSelectionner = $lesMoisVisiteur[0]['mois'];
            }

            //Recupère tous les FraisForfait du visiteur choisi
            $LesFrais = $pdo->getLesFraisForfait($idVisiteurSelectionner, $MoiSelectionner);
            $ETP = $LesFrais[0]['quantite'];
            $KM = $LesFrais[1]['quantite'];
            $NUI = $LesFrais[2]['quantite'];
            $REP = $LesFrais[3]['quantite'];

            //Recupère tous les FraisHorsForfait du visiteur choisi
            $lesFraisForfait = $pdo->getLesFraisHorsForfait($idVisiteurSelectionner, $MoiSelectionner);

            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            include 'vues/vuesComptables/v_ElementForfaitises.php';
            if ($lesFraisForfait) {
                foreach ($lesFraisForfait as $unFraisHorsForfait) {
                    $libelle = htmlspecialchars($unFraisHorsForfait['libelle']);
                    $date = $unFraisHorsForfait['date'];
                    $montant = $unFraisHorsForfait['montant'];
                    $idFraisHF = $unFraisHorsForfait['id'];
                    $nameMontant = 'montant' . $idFraisHF;
                    $nameLibelle = 'libelle' . $idFraisHF;
                    include 'vues/vuesComptables/v_fraisHorsForfaitComp.php';
                }
            } else {
                ajouterErreur("Aucun frais hors forfait pour ce visiteur ce mois-ci !");
                include 'vues/v_erreurs.php';
            }
        } else {
            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            ajouterErreur("Aucune fiche de frais à validé pour ce visiteur !");
            include 'vues/v_erreurs.php';
        }

        break;
    case 'Reinitialise':
        //recupère le mois choisit par l'utilisateur
        $MoiSelectionner = filter_input(INPUT_GET, 'mois', FILTER_SANITIZE_STRING);
        //recupère le visiteur choisit par l'utilisateur
        $idVisiteurSelectionner = filter_input(INPUT_GET, 'visiteur', FILTER_SANITIZE_STRING);
        //recupère tous les mois du visiteur choisi
        $lesMoisVisiteur = $pdo->getLesMoisDisponiblesCL($idVisiteurSelectionner);
        if ($lesMoisVisiteur) {
            if ($MoiSelectionner) {
                $numAnnee = substr($MoiSelectionner, 2, 4);
                $numMois = substr($MoiSelectionner, 0, 2);
                $MoiSelectionner = $numAnnee . $numMois;
            }
            //Change nom de la variable 
            $nomVisiteur = $lesNomsvisiteurs;
            $lesCles = array_keys($lesMoisVisiteur);
            //$moisASelectionner = $lesCles[0];
            foreach ($lesNomsvisiteurs as $visiteurs) {
                if ($visiteurs['id'] == $idVisiteurSelectionner) {
                    $leVisiteur = $visiteurs;
                }
            }
            $existe = false;
            $DateAnne = substr($MoiSelectionner, 2);
            $DateMois = substr($MoiSelectionner, 0, 2);
            $MoiSelectionner = $DateAnne . $DateMois;
            foreach ($lesMoisVisiteur as $unMois) {
                if ($unMois['mois'] == $MoiSelectionner) {
                    $existe = true;
                }
            }
            if (!$existe) {

                $MoiSelectionner = $lesMoisVisiteur[0]['mois'];
            }
            //Recupère tous les FraisForfait du visiteur choisi
            $LesFrais = $pdo->getLesFraisForfait($idVisiteurSelectionner, $MoiSelectionner);
            $ETP = $LesFrais[0]['quantite'];
            $KM = $LesFrais[1]['quantite'];
            $NUI = $LesFrais[2]['quantite'];
            $REP = $LesFrais[3]['quantite'];
            //Recupère tous les FraisHorsForfait du visiteur choisi
            $lesFraisForfait = $pdo->getLesFraisHorsForfait($idVisiteurSelectionner, $MoiSelectionner);

            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            include 'vues/vuesComptables/v_ElementForfaitises.php';

            if ($lesFraisForfait) {
                foreach ($lesFraisForfait as $unFraisHorsForfait) {
                    $libelle = htmlspecialchars($unFraisHorsForfait['libelle']);
                    $date = $unFraisHorsForfait['date'];
                    $montant = $unFraisHorsForfait['montant'];
                    $idFraisHF = $unFraisHorsForfait['id'];
                    $nameMontant = 'montant' . $idFraisHF;
                    $nameLibelle = 'libelle' . $idFraisHF;
                    include 'vues/vuesComptables/v_fraisHorsForfaitComp.php';
                }
            } else {
                ajouterErreur("Aucun frais hors forfait pour ce visiteur ce mois-ci !");
                include 'vues/v_erreurs.php';
            }
        } else {
            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            ajouterErreur("Aucune fiche de frais à validé pour ce visiteur !");
            include 'vues/v_erreurs.php';
        }

        break;

    case 'corrigerElementForfaitises':
        $ETP = filter_input(INPUT_POST, 'ETP', FILTER_SANITIZE_STRING);
        $KM = filter_input(INPUT_POST, 'KM', FILTER_SANITIZE_STRING);
        $NUI = filter_input(INPUT_POST, 'NUI', FILTER_SANITIZE_STRING);
        $REP = filter_input(INPUT_POST, 'REP', FILTER_SANITIZE_STRING);
        $idVisiteurSelectionner = filter_input(INPUT_GET, 'visiteur', FILTER_SANITIZE_STRING);
        $MoiSelectionner = filter_input(INPUT_GET, 'mois', FILTER_SANITIZE_STRING);

        $numAnneeActuelle = substr($MoiSelectionner, 0, 4);
        $numMoisActuelle = substr($MoiSelectionner, 4, 2);

        $lesMoisVisiteur = $pdo->getLesMoisDisponiblesCL($idVisiteurSelectionner);
        if ($lesMoisVisiteur) {
            if ($MoiSelectionner) {
                $numAnnee = substr($MoiSelectionner, 2, 4);
                $numMois = substr($MoiSelectionner, 0, 2);
                $MoiSelectionner = $numAnnee . $numMois;
            }

            foreach ($lesNomsvisiteurs as $visiteurs) {
                if ($visiteurs['id'] == $idVisiteurSelectionner) {
                    $leVisiteur = $visiteurs;
                }
            }
            $existe = false;
            foreach ($lesMoisVisiteur as $unMois) {
                if ($unMois['mois'] == $MoiSelectionner) {
                    $existe = true;
                }
            }
            if (!$existe) {
                $MoiSelectionner = $lesMoisVisiteur[0]['mois'];
            }

            $lesNouveauxFrais = array(
                'ETP' => $ETP,
                'KM' => $KM,
                'NUI' => $NUI,
                'REP' => $REP,
            );
            $pdo->majFraisForfait($idVisiteurSelectionner, $MoiSelectionner, $lesNouveauxFrais);

            //Recupère tous les FraisForfait du visiteur choisi
            $LesFrais = $pdo->getLesFraisForfait($idVisiteurSelectionner, $MoiSelectionner);
            $ETP = $LesFrais[0]['quantite'];
            $KM = $LesFrais[1]['quantite'];
            $NUI = $LesFrais[2]['quantite'];
            $REP = $LesFrais[3]['quantite'];
            //Recupère tous les FraisHorsForfait du visiteur choisi
            $lesFraisForfait = $pdo->getLesFraisHorsForfait($idVisiteurSelectionner, $MoiSelectionner);

            ajouterSucces("Les frais forfait ont bien été mis à jour");
            include 'vues/v_succes.php';

            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            include 'vues/vuesComptables/v_ElementForfaitises.php';

            if ($lesFraisForfait) {
                foreach ($lesFraisForfait as $unFraisHorsForfait) {
                    $libelle = htmlspecialchars($unFraisHorsForfait['libelle']);
                    $date = $unFraisHorsForfait['date'];
                    $montant = $unFraisHorsForfait['montant'];
                    $idFraisHF = $unFraisHorsForfait['id'];
                    $nameMontant = 'montant' . $idFraisHF;
                    $nameLibelle = 'libelle' . $idFraisHF;
                    include 'vues/vuesComptables/v_fraisHorsForfaitComp.php';
                }
            } else {
                ajouterErreur("Aucun frais hors forfait pour ce visiteur ce mois-ci !");
                include 'vues/v_erreurs.php';
            }
        } else {
            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            ajouterErreur("Aucune fiche de frais à validé pour ce visiteur !");
            include 'vues/v_erreurs.php';
        }
        break;
    case 'corrigerFraisHorsForfait' :

        $idVisiteurSelectionner = filter_input(INPUT_GET, 'visiteur', FILTER_SANITIZE_STRING);
        $MoiSelectionner = filter_input(INPUT_GET, 'mois', FILTER_SANITIZE_STRING);
        $idFraisHF = filter_input(INPUT_GET, 'idFrais', FILTER_SANITIZE_STRING);
        $nameMontant = 'montant' . $idFraisHF;
        $montant = filter_input(INPUT_POST, $nameMontant, FILTER_SANITIZE_STRING);

        $numAnneeActuelle = substr($MoiSelectionner, 2);
        $numMoisActuelle = substr($MoiSelectionner, 0, 2);
        $MoiSelectionner = $numAnneeActuelle . $numMoisActuelle;

        $pdo->majFraisHorsForfait($idVisiteurSelectionner, $MoiSelectionner, $montant, $idFraisHF);

        $lesMoisVisiteur = $pdo->getLesMoisDisponiblesCL($idVisiteurSelectionner);
        if ($lesMoisVisiteur) {

            foreach ($lesNomsvisiteurs as $visiteurs) {
                if ($visiteurs['id'] == $idVisiteurSelectionner) {
                    $leVisiteur = $visiteurs;
                }
            }
            $existe = false;
            foreach ($lesMoisVisiteur as $unMois) {
                if ($unMois['mois'] == $MoiSelectionner) {
                    $existe = true;
                }
            }
            if (!$existe) {
                $MoiSelectionner = $lesMoisVisiteur[0]['mois'];
            }
            //Recupère tous les FraisForfait du visiteur choisi
            $LesFrais = $pdo->getLesFraisForfait($idVisiteurSelectionner, $MoiSelectionner);
            $ETP = $LesFrais[0]['quantite'];
            $KM = $LesFrais[1]['quantite'];
            $NUI = $LesFrais[2]['quantite'];
            $REP = $LesFrais[3]['quantite'];
            //Recupère tous les FraisHorsForfait du visiteur choisi
            $lesFraisForfait = $pdo->getLesFraisHorsForfait($idVisiteurSelectionner, $MoiSelectionner);

            ajouterSucces("Les frais hors forfait ont bien été mis à jour");
            include 'vues/v_succes.php';

            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            include 'vues/vuesComptables/v_ElementForfaitises.php';

            if ($lesFraisForfait) {
                foreach ($lesFraisForfait as $unFraisHorsForfait) {
                    $libelle = htmlspecialchars($unFraisHorsForfait['libelle']);
                    $date = $unFraisHorsForfait['date'];
                    $montant = $unFraisHorsForfait['montant'];
                    $idFraisHF = $unFraisHorsForfait['id'];
                    $nameMontant = 'montant' . $idFraisHF;
                    $nameLibelle = 'libelle' . $idFraisHF;
                    include 'vues/vuesComptables/v_fraisHorsForfaitComp.php';
                }
            } else {
                ajouterErreur("Aucun frais hors forfait pour ce visiteur ce mois-ci !");
                include 'vues/v_erreurs.php';
            }
        } else {
            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            ajouterErreur("Aucune fiche de frais à validé pour ce visiteur !");
            include 'vues/v_erreurs.php';
        }

        break;
    case 'refuserFraisHorsForfait' :
        $idVisiteurSelectionner = filter_input(INPUT_GET, 'visiteur', FILTER_SANITIZE_STRING);
        $MoiSelectionner = filter_input(INPUT_GET, 'mois', FILTER_SANITIZE_STRING);
        $idFraisHF = filter_input(INPUT_GET, 'idFrais', FILTER_SANITIZE_STRING);

        $numAnneeActuelle = substr($MoiSelectionner, 2);
        $numMoisActuelle = substr($MoiSelectionner, 0, 2);
        $MoiSelectionner = $numAnneeActuelle . $numMoisActuelle;

        $pdo->refusFraisHorsForfait($idVisiteurSelectionner, $MoiSelectionner, $idFraisHF);
        $lesMoisVisiteur = $pdo->getLesMoisDisponiblesCL($idVisiteurSelectionner);
        if ($lesMoisVisiteur) {

            foreach ($lesNomsvisiteurs as $visiteurs) {
                if ($visiteurs['id'] == $idVisiteurSelectionner) {
                    $leVisiteur = $visiteurs;
                }
            }
            $existe = false;
            foreach ($lesMoisVisiteur as $unMois) {
                if ($unMois['mois'] == $MoiSelectionner) {
                    $existe = true;
                }
            }
            if (!$existe) {
                $MoiSelectionner = $lesMoisVisiteur[0]['mois'];
            }
            //Recupère tous les FraisForfait du visiteur choisi
            $LesFrais = $pdo->getLesFraisForfait($idVisiteurSelectionner, $MoiSelectionner);
            $ETP = $LesFrais[0]['quantite'];
            $KM = $LesFrais[1]['quantite'];
            $NUI = $LesFrais[2]['quantite'];
            $REP = $LesFrais[3]['quantite'];
            //Recupère tous les FraisHorsForfait du visiteur choisi
            $lesFraisForfait = $pdo->getLesFraisHorsForfait($idVisiteurSelectionner, $MoiSelectionner);

            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            include 'vues/vuesComptables/v_ElementForfaitises.php';

            if ($lesFraisForfait) {
                foreach ($lesFraisForfait as $unFraisHorsForfait) {
                    $libelle = htmlspecialchars($unFraisHorsForfait['libelle']);
                    $date = $unFraisHorsForfait['date'];
                    $montant = $unFraisHorsForfait['montant'];
                    $idFraisHF = $unFraisHorsForfait['id'];
                    $nameMontant = 'montant' . $idFraisHF;
                    $nameLibelle = 'libelle' . $idFraisHF;
                    include 'vues/vuesComptables/v_fraisHorsForfaitComp.php';
                }
            } else {
                ajouterErreur("Aucun frais hors forfait pour ce visiteur ce mois-ci !");
                include 'vues/v_erreurs.php';
            }
        } else {
            include 'vues/vuesComptables/v_choisirLeVisiteur.php';
            ajouterErreur("Aucune fiche de frais à validé pour ce visiteur !");
            include 'vues/v_erreurs.php';
        }
        break;
    case 'validerFicheFrais' :
        $idVisiteurSelectionner = filter_input(INPUT_GET, 'visiteur', FILTER_SANITIZE_STRING);
        $MoiSelectionner = filter_input(INPUT_GET, 'mois', FILTER_SANITIZE_STRING);

        $pdo->majEtatFicheFrais($idVisiteurSelectionner, $MoiSelectionner, "VA");

        ajouterSucces(" La fiche est validé ! ");
        include 'vues/v_succes.php';

        break;
}

   
        
        ";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";